%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char token[257];
    int symbolTableCode;
} PIF;

typedef struct {
    char token[257];
    int index;
} ST;

ST SymbolTable[100];
int stLength = 0;

PIF ProgramInternalForm[300];
int pifLength = 0;

int errorFound = 0;
int lineNumber = 1;

int addToST(char* token) {
    for (int i = 0; i < stLength; i++) {
        if (strcmp(SymbolTable[i].token, token) == 0) {
            return SymbolTable[i].index;
        }
    }
    strcpy(SymbolTable[stLength].token, token);
    SymbolTable[stLength].index = stLength;
    stLength++;
    return stLength - 1;
}

void addToPIF(char* token, int stCode) {
    strcpy(ProgramInternalForm[pifLength].token, token);
    ProgramInternalForm[pifLength].symbolTableCode = stCode;
    pifLength++;
}

void showSymbolTable() {
    printf("~~~~~~~ Symbol Table ~~~~~~~\n");
    for (int i = 0; i < stLength; i++) {
        printf(" %s  %d\n", SymbolTable[i].token, SymbolTable[i].index);
    }
    printf("~~~~~~~ End ST ~~~~~~~\n\n");
}

void showProgramInternalForm() {
    printf("~~~~~~~ Program Internal Form ~~~~~~~\n");
    for (int i = 0; i < pifLength; i++) {
        printf(" %s  %d\n", ProgramInternalForm[i].token, ProgramInternalForm[i].symbolTableCode);
    }
    printf("~~~~~~~ End PIF ~~~~~~~\n\n");
}

%}

%%
(begin|end|start|stop|if|while|for|write|read|else|int|char|true|false|input|output)  { addToPIF(yytext, -1); }
[a-zA-Z_][a-zA-Z0-9_]*        { int stCode = addToST(yytext); addToPIF(yytext, stCode); }
[+-]?(0|[1-9][0-9]*)(\.[0-9]+)? { int stCode = addToST(yytext); addToPIF(yytext, stCode); }
\"([^\\\"\n]|\\.)*\"           { int stCode = addToST(yytext); addToPIF(yytext, stCode); }
[\+\-\*\/\%\=\<\>\!]+          { addToPIF(yytext, -1); }
[\[\]\{\}\:\;\(\)\,]           { addToPIF(yytext, -1); }
\n                             { ++lineNumber; }
[ \t]+                         { /* Ignore whitespace */ }
.                              { errorFound = 1; printf("Illegal token %s at line %d!\n", yytext, lineNumber); }
%%

int yywrap() { return 1; }

int main(int argc, char** argv) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <source_code_file>\n", argv[0]);
        return EXIT_FAILURE;
    }
    
    FILE *fp = fopen(argv[1], "r");
    if (!fp) {
        perror("Error opening file");
        return EXIT_FAILURE;
    }

    yyin = fp;  // Set the input file for the lexer
    yylex();    // Start the lexical analysis

    if (errorFound == 0) {
        showSymbolTable();
        showProgramInternalForm();
    }

    fclose(fp);
    return EXIT_SUCCESS;
}
