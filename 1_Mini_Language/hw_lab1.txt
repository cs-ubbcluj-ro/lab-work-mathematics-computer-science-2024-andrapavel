a) Language Specification:

1. Language Definition:
   1.1. Alphabet:
        a. uppercase Latin letters A-Z
        b. lowercase Latin letters a-z
        c. underscore character '_'
        d. decimal digits (0-9)
   1.2. Lexical elements:
        a. Special symbols:
           > Operators: +, -, *, /, %, =, <, <=, >, >=, ==
           > Separators: [] {} : ; () space
        b. Reserved words: 
           > int, char, if, else, while, do, true, false, return, begin, end, input, output, break
        c. Identifiers: 
           > a sequence of letters, digits and underscores, such that the first character is either a letter
           > Syntex rule: 
             • identifier ::= letter (letter | digit | underscore)*
             • letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
             • digit ::= "0" | "1" | ... | "9"
             • underscore ::= "_"
        d.  Constants:
               > Integer constants:
                 • noconst := "+" no | "-" no | no
                 • no ::= digit{no}
               > Character constants:
                 • character ::= "'" (letter | digit) "'"
               > Boolean constants:
                 • boolean ::= "true" | "false"
2. Syntax:
         The words - predefined tokens - are specified between " and " :
         2.1. General structure:
                > program ::= "begin" stmtlist "end"
         2.2. Declarations:
                > declaration ::= type IDENTIFIER ";"
                > type ::= "int" | "char"
         2.3. Statements:
                > stmtlist ::= stmt | stmt ";" stmtlist
                > stmt ::= assignstmt | iostmt | ifstmt | whilestmt | "break"
                  • Assignment statement:
                    - assignstmt ::= IDENTIFIER "=" expression
                  • I/O statements:
                    - iostmt ::= "input" "(" IDENTIFIER ")" | "output" "(" IDENTIFIER ")"
                  • Conditional statement (if):
                    - ifstmt ::= "if" condition "then" stmt ["else" stmt]
                  • Loop statement (while):
                    - whilestmt ::= "while" condition " do" stmt
         2.4. Expressions:
              > expression ::= term { ( "+" | "-" ) term }
              > term ::= factor { ( "*" | "/" | "%" ) factor }
              > factor ::= IDENTIFIER | noconst | "(" expression ")"
         2.5. Conditions:
              > condition ::= expression RELATION expression
              > RELATION ::= "<" | "<=" | "=" | "!=" | ">=" | ">"
         2.6. User defined:
              > struct_definition ::= "struct" struct_name "{" struct_body "}" ";"
              > struct_name ::= IDENTIFIER
              > struct_body ::= struct_member ";" struct_body | struct_member ";"
              > struct_member ::= data_type IDENTIFIER | "struct" struct_name IDENTIFIER
              > data_type ::= "int" | "char" | struct_name
              > IDENTIFIER ::= letter (letter | digit | underscore)*
              > letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
              > digit ::= "0" | "1" | ... | "9"

b. Minilanguage program:
   
   begin
       int n, i, j, k, flag;
    
       input(k);

       i = 2;
       while i < k do
       begin
           flag = 1;
           j = 2;
           while j * j <= i do
           begin
               if (i % j) = 0 then
               begin
                   flag = 0;
                   break;
               end;
               j = j + 1;
           end;
           if flag == 1 then
               output(i);
           i = i + 1;
       end;
   end
